/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Opportunities generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`opportunities`")
public class Opportunities implements Serializable {

    private Integer id;
    private String name;
    private String description;
    private Integer categoryid;
    private String probabilityofwinning;
    private LocalDateTime forecastclosedate;
    private Integer userresponsableid;
    private String valueCurrency;
    private String valueBidamount;
    private String valueUnitofmeasure;
    private Integer pipelineid;
    private LocalDateTime dateCreation;
    private Integer forecastCommitDeals;
    private Integer forecastUpside;
    private Integer pipesize;
    private String pipenames;
    private Integer wapu;
    private String pipelinestatus;
    private Integer leadsourceid;
    private Categories categories;
    private Pipelines pipelines;
    private Users users;
    private LeadSources leadSources;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`name`", nullable = true, length = 255)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "`description`", nullable = true, length = 5000)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "`categoryid`", nullable = true, scale = 0, precision = 10)
    public Integer getCategoryid() {
        return this.categoryid;
    }

    public void setCategoryid(Integer categoryid) {
        this.categoryid = categoryid;
    }

    @Column(name = "`probabilityofwinning`", nullable = true, length = 255)
    public String getProbabilityofwinning() {
        return this.probabilityofwinning;
    }

    public void setProbabilityofwinning(String probabilityofwinning) {
        this.probabilityofwinning = probabilityofwinning;
    }

    @Column(name = "`forecastclosedate`", nullable = true)
    public LocalDateTime getForecastclosedate() {
        return this.forecastclosedate;
    }

    public void setForecastclosedate(LocalDateTime forecastclosedate) {
        this.forecastclosedate = forecastclosedate;
    }

    @Column(name = "`userresponsableid`", nullable = true, scale = 0, precision = 10)
    public Integer getUserresponsableid() {
        return this.userresponsableid;
    }

    public void setUserresponsableid(Integer userresponsableid) {
        this.userresponsableid = userresponsableid;
    }

    @Column(name = "`value_currency`", nullable = true, length = 255)
    public String getValueCurrency() {
        return this.valueCurrency;
    }

    public void setValueCurrency(String valueCurrency) {
        this.valueCurrency = valueCurrency;
    }

    @Column(name = "`value_bidamount`", nullable = true, length = 255)
    public String getValueBidamount() {
        return this.valueBidamount;
    }

    public void setValueBidamount(String valueBidamount) {
        this.valueBidamount = valueBidamount;
    }

    @Column(name = "`value_unitofmeasure`", nullable = true, length = 255)
    public String getValueUnitofmeasure() {
        return this.valueUnitofmeasure;
    }

    public void setValueUnitofmeasure(String valueUnitofmeasure) {
        this.valueUnitofmeasure = valueUnitofmeasure;
    }

    @Column(name = "`pipelineid`", nullable = true, scale = 0, precision = 10)
    public Integer getPipelineid() {
        return this.pipelineid;
    }

    public void setPipelineid(Integer pipelineid) {
        this.pipelineid = pipelineid;
    }

    @Column(name = "`date_creation`", nullable = true)
    public LocalDateTime getDateCreation() {
        return this.dateCreation;
    }

    public void setDateCreation(LocalDateTime dateCreation) {
        this.dateCreation = dateCreation;
    }

    @Column(name = "`forecast_commit_deals`", nullable = true, scale = 0, precision = 10)
    public Integer getForecastCommitDeals() {
        return this.forecastCommitDeals;
    }

    public void setForecastCommitDeals(Integer forecastCommitDeals) {
        this.forecastCommitDeals = forecastCommitDeals;
    }

    @Column(name = "`forecast_upside`", nullable = true, scale = 0, precision = 10)
    public Integer getForecastUpside() {
        return this.forecastUpside;
    }

    public void setForecastUpside(Integer forecastUpside) {
        this.forecastUpside = forecastUpside;
    }

    @Column(name = "`pipesize`", nullable = true, scale = 0, precision = 10)
    public Integer getPipesize() {
        return this.pipesize;
    }

    public void setPipesize(Integer pipesize) {
        this.pipesize = pipesize;
    }

    @Column(name = "`pipenames`", nullable = true, length = 255)
    public String getPipenames() {
        return this.pipenames;
    }

    public void setPipenames(String pipenames) {
        this.pipenames = pipenames;
    }

    @Column(name = "`wapu`", nullable = true, scale = 0, precision = 10)
    public Integer getWapu() {
        return this.wapu;
    }

    public void setWapu(Integer wapu) {
        this.wapu = wapu;
    }

    @Column(name = "`pipelinestatus`", nullable = true, length = 255)
    public String getPipelinestatus() {
        return this.pipelinestatus;
    }

    public void setPipelinestatus(String pipelinestatus) {
        this.pipelinestatus = pipelinestatus;
    }

    @Column(name = "`leadsourceid`", nullable = true, scale = 0, precision = 10)
    public Integer getLeadsourceid() {
        return this.leadsourceid;
    }

    public void setLeadsourceid(Integer leadsourceid) {
        this.leadsourceid = leadsourceid;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`categoryid`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`opportunities_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Categories getCategories() {
        return this.categories;
    }

    public void setCategories(Categories categories) {
        if(categories != null) {
            this.categoryid = categories.getId();
        }

        this.categories = categories;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`pipelineid`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`opportunities_ibfk_3`"))
    @Fetch(FetchMode.JOIN)
    public Pipelines getPipelines() {
        return this.pipelines;
    }

    public void setPipelines(Pipelines pipelines) {
        if(pipelines != null) {
            this.pipelineid = pipelines.getId();
        }

        this.pipelines = pipelines;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`userresponsableid`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`opportunities_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.userresponsableid = users.getId();
        }

        this.users = users;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`leadsourceid`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`opportunities_ibfk_5`"))
    @Fetch(FetchMode.JOIN)
    public LeadSources getLeadSources() {
        return this.leadSources;
    }

    public void setLeadSources(LeadSources leadSources) {
        if(leadSources != null) {
            this.leadsourceid = leadSources.getId();
        }

        this.leadSources = leadSources;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Opportunities)) return false;
        final Opportunities opportunities = (Opportunities) o;
        return Objects.equals(getId(), opportunities.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}