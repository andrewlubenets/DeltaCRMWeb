/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.ActivitySets;

/**
 * Service object for domain model class {@link ActivitySets}.
 */
public interface ActivitySetsService {

    /**
     * Creates a new ActivitySets. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ActivitySets if any.
     *
     * @param activitySets Details of the ActivitySets to be created; value cannot be null.
     * @return The newly created ActivitySets.
     */
    ActivitySets create(@Valid ActivitySets activitySets);


	/**
     * Returns ActivitySets by given id if exists.
     *
     * @param activitysetsId The id of the ActivitySets to get; value cannot be null.
     * @return ActivitySets associated with the given activitysetsId.
	 * @throws EntityNotFoundException If no ActivitySets is found.
     */
    ActivitySets getById(Integer activitysetsId);

    /**
     * Find and return the ActivitySets by given id if exists, returns null otherwise.
     *
     * @param activitysetsId The id of the ActivitySets to get; value cannot be null.
     * @return ActivitySets associated with the given activitysetsId.
     */
    ActivitySets findById(Integer activitysetsId);

	/**
     * Find and return the list of ActivitySets by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param activitysetsIds The id's of the ActivitySets to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return ActivitySets associated with the given activitysetsIds.
     */
    List<ActivitySets> findByMultipleIds(List<Integer> activitysetsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing ActivitySets. It replaces all fields of the existing ActivitySets with the given activitySets.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ActivitySets if any.
     *
     * @param activitySets The details of the ActivitySets to be updated; value cannot be null.
     * @return The updated ActivitySets.
     * @throws EntityNotFoundException if no ActivitySets is found with given input.
     */
    ActivitySets update(@Valid ActivitySets activitySets);

    /**
     * Deletes an existing ActivitySets with the given id.
     *
     * @param activitysetsId The id of the ActivitySets to be deleted; value cannot be null.
     * @return The deleted ActivitySets.
     * @throws EntityNotFoundException if no ActivitySets found with the given id.
     */
    ActivitySets delete(Integer activitysetsId);

    /**
     * Deletes an existing ActivitySets with the given object.
     *
     * @param activitySets The instance of the ActivitySets to be deleted; value cannot be null.
     */
    void delete(ActivitySets activitySets);

    /**
     * Find all ActivitySets matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ActivitySets.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<ActivitySets> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all ActivitySets matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ActivitySets.
     *
     * @see Pageable
     * @see Page
     */
    Page<ActivitySets> findAll(String query, Pageable pageable);

    /**
     * Exports all ActivitySets matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all ActivitySets matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the ActivitySets in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the ActivitySets.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}