/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Departments;
import com.crmweb.crm.Entities;
import com.crmweb.crm.Locations;
import com.crmweb.crm.Posts;


/**
 * ServiceImpl object for domain model class Entities.
 *
 * @see Entities
 */
@Service("crm.EntitiesService")
@Validated
public class EntitiesServiceImpl implements EntitiesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EntitiesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("crm.LocationsService")
    private LocationsService locationsService;

    @Lazy
    @Autowired
    @Qualifier("crm.DepartmentsService")
    private DepartmentsService departmentsService;

    @Lazy
    @Autowired
    @Qualifier("crm.PostsService")
    private PostsService postsService;

    @Autowired
    @Qualifier("crm.EntitiesDao")
    private WMGenericDao<Entities, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Entities, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Entities create(Entities entities) {
        LOGGER.debug("Creating a new Entities with information: {}", entities);

        Entities entitiesCreated = this.wmGenericDao.create(entities);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(entitiesCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Entities getById(Integer entitiesId) {
        LOGGER.debug("Finding Entities by id: {}", entitiesId);
        return this.wmGenericDao.findById(entitiesId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Entities findById(Integer entitiesId) {
        LOGGER.debug("Finding Entities by id: {}", entitiesId);
        try {
            return this.wmGenericDao.findById(entitiesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Entities found with id: {}", entitiesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<Entities> findByMultipleIds(List<Integer> entitiesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Entities by ids: {}", entitiesIds);

        return this.wmGenericDao.findByMultipleIds(entitiesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public Entities update(Entities entities) {
        LOGGER.debug("Updating Entities with information: {}", entities);

        this.wmGenericDao.update(entities);
        this.wmGenericDao.refresh(entities);

        return entities;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Entities delete(Integer entitiesId) {
        LOGGER.debug("Deleting Entities with id: {}", entitiesId);
        Entities deleted = this.wmGenericDao.findById(entitiesId);
        if (deleted == null) {
            LOGGER.debug("No Entities found with id: {}", entitiesId);
            throw new EntityNotFoundException(String.valueOf(entitiesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(Entities entities) {
        LOGGER.debug("Deleting Entities with {}", entities);
        this.wmGenericDao.delete(entities);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Entities> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Entities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Entities> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Entities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table Entities to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table Entities to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Departments> findAssociatedDepartmentses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated departmentses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("entities.id = '" + id + "'");

        return departmentsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Locations> findAssociatedLocationses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated locationses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("entities.id = '" + id + "'");

        return locationsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Posts> findAssociatedPostses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated postses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("entities.id = '" + id + "'");

        return postsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LocationsService instance
     */
    protected void setLocationsService(LocationsService service) {
        this.locationsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DepartmentsService instance
     */
    protected void setDepartmentsService(DepartmentsService service) {
        this.departmentsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PostsService instance
     */
    protected void setPostsService(PostsService service) {
        this.postsService = service;
    }

}