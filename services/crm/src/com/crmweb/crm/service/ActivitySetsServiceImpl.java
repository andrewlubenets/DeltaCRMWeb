/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.ActivitySets;


/**
 * ServiceImpl object for domain model class ActivitySets.
 *
 * @see ActivitySets
 */
@Service("crm.ActivitySetsService")
@Validated
public class ActivitySetsServiceImpl implements ActivitySetsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActivitySetsServiceImpl.class);


    @Autowired
    @Qualifier("crm.ActivitySetsDao")
    private WMGenericDao<ActivitySets, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ActivitySets, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public ActivitySets create(ActivitySets activitySets) {
        LOGGER.debug("Creating a new ActivitySets with information: {}", activitySets);

        ActivitySets activitySetsCreated = this.wmGenericDao.create(activitySets);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(activitySetsCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public ActivitySets getById(Integer activitysetsId) {
        LOGGER.debug("Finding ActivitySets by id: {}", activitysetsId);
        return this.wmGenericDao.findById(activitysetsId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public ActivitySets findById(Integer activitysetsId) {
        LOGGER.debug("Finding ActivitySets by id: {}", activitysetsId);
        try {
            return this.wmGenericDao.findById(activitysetsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ActivitySets found with id: {}", activitysetsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<ActivitySets> findByMultipleIds(List<Integer> activitysetsIds, boolean orderedReturn) {
        LOGGER.debug("Finding ActivitySets by ids: {}", activitysetsIds);

        return this.wmGenericDao.findByMultipleIds(activitysetsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public ActivitySets update(ActivitySets activitySets) {
        LOGGER.debug("Updating ActivitySets with information: {}", activitySets);

        this.wmGenericDao.update(activitySets);
        this.wmGenericDao.refresh(activitySets);

        return activitySets;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public ActivitySets delete(Integer activitysetsId) {
        LOGGER.debug("Deleting ActivitySets with id: {}", activitysetsId);
        ActivitySets deleted = this.wmGenericDao.findById(activitysetsId);
        if (deleted == null) {
            LOGGER.debug("No ActivitySets found with id: {}", activitysetsId);
            throw new EntityNotFoundException(String.valueOf(activitysetsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(ActivitySets activitySets) {
        LOGGER.debug("Deleting ActivitySets with {}", activitySets);
        this.wmGenericDao.delete(activitySets);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<ActivitySets> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ActivitySets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<ActivitySets> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ActivitySets");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table ActivitySets to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table ActivitySets to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}