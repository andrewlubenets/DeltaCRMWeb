/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.TaskProjects;

/**
 * Service object for domain model class {@link TaskProjects}.
 */
public interface TaskProjectsService {

    /**
     * Creates a new TaskProjects. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TaskProjects if any.
     *
     * @param taskProjects Details of the TaskProjects to be created; value cannot be null.
     * @return The newly created TaskProjects.
     */
    TaskProjects create(@Valid TaskProjects taskProjects);


	/**
     * Returns TaskProjects by given id if exists.
     *
     * @param taskprojectsId The id of the TaskProjects to get; value cannot be null.
     * @return TaskProjects associated with the given taskprojectsId.
	 * @throws EntityNotFoundException If no TaskProjects is found.
     */
    TaskProjects getById(Integer taskprojectsId);

    /**
     * Find and return the TaskProjects by given id if exists, returns null otherwise.
     *
     * @param taskprojectsId The id of the TaskProjects to get; value cannot be null.
     * @return TaskProjects associated with the given taskprojectsId.
     */
    TaskProjects findById(Integer taskprojectsId);

	/**
     * Find and return the list of TaskProjects by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param taskprojectsIds The id's of the TaskProjects to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TaskProjects associated with the given taskprojectsIds.
     */
    List<TaskProjects> findByMultipleIds(List<Integer> taskprojectsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TaskProjects. It replaces all fields of the existing TaskProjects with the given taskProjects.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TaskProjects if any.
     *
     * @param taskProjects The details of the TaskProjects to be updated; value cannot be null.
     * @return The updated TaskProjects.
     * @throws EntityNotFoundException if no TaskProjects is found with given input.
     */
    TaskProjects update(@Valid TaskProjects taskProjects);

    /**
     * Deletes an existing TaskProjects with the given id.
     *
     * @param taskprojectsId The id of the TaskProjects to be deleted; value cannot be null.
     * @return The deleted TaskProjects.
     * @throws EntityNotFoundException if no TaskProjects found with the given id.
     */
    TaskProjects delete(Integer taskprojectsId);

    /**
     * Deletes an existing TaskProjects with the given object.
     *
     * @param taskProjects The instance of the TaskProjects to be deleted; value cannot be null.
     */
    void delete(TaskProjects taskProjects);

    /**
     * Find all TaskProjects matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TaskProjects.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TaskProjects> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TaskProjects matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TaskProjects.
     *
     * @see Pageable
     * @see Page
     */
    Page<TaskProjects> findAll(String query, Pageable pageable);

    /**
     * Exports all TaskProjects matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TaskProjects matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TaskProjects in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TaskProjects.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}