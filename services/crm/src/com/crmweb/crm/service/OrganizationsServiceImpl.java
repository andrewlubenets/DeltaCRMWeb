/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Contacts;
import com.crmweb.crm.Leads;
import com.crmweb.crm.Organizations;


/**
 * ServiceImpl object for domain model class Organizations.
 *
 * @see Organizations
 */
@Service("crm.OrganizationsService")
@Validated
public class OrganizationsServiceImpl implements OrganizationsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrganizationsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("crm.LeadsService")
    private LeadsService leadsService;

    @Lazy
    @Autowired
    @Qualifier("crm.ContactsService")
    private ContactsService contactsService;

    @Autowired
    @Qualifier("crm.OrganizationsDao")
    private WMGenericDao<Organizations, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Organizations, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Organizations create(Organizations organizations) {
        LOGGER.debug("Creating a new Organizations with information: {}", organizations);

        Organizations organizationsCreated = this.wmGenericDao.create(organizations);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(organizationsCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Organizations getById(Integer organizationsId) {
        LOGGER.debug("Finding Organizations by id: {}", organizationsId);
        return this.wmGenericDao.findById(organizationsId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Organizations findById(Integer organizationsId) {
        LOGGER.debug("Finding Organizations by id: {}", organizationsId);
        try {
            return this.wmGenericDao.findById(organizationsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Organizations found with id: {}", organizationsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<Organizations> findByMultipleIds(List<Integer> organizationsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Organizations by ids: {}", organizationsIds);

        return this.wmGenericDao.findByMultipleIds(organizationsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public Organizations update(Organizations organizations) {
        LOGGER.debug("Updating Organizations with information: {}", organizations);

        this.wmGenericDao.update(organizations);
        this.wmGenericDao.refresh(organizations);

        return organizations;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Organizations delete(Integer organizationsId) {
        LOGGER.debug("Deleting Organizations with id: {}", organizationsId);
        Organizations deleted = this.wmGenericDao.findById(organizationsId);
        if (deleted == null) {
            LOGGER.debug("No Organizations found with id: {}", organizationsId);
            throw new EntityNotFoundException(String.valueOf(organizationsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(Organizations organizations) {
        LOGGER.debug("Deleting Organizations with {}", organizations);
        this.wmGenericDao.delete(organizations);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Organizations> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Organizations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Organizations> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Organizations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table Organizations to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table Organizations to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Contacts> findAssociatedContactses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated contactses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("organizations.id = '" + id + "'");

        return contactsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Leads> findAssociatedLeadses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated leadses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("organizations.id = '" + id + "'");

        return leadsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LeadsService instance
     */
    protected void setLeadsService(LeadsService service) {
        this.leadsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ContactsService instance
     */
    protected void setContactsService(ContactsService service) {
        this.contactsService = service;
    }

}