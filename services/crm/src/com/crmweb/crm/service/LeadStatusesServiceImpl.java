/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.LeadStatuses;
import com.crmweb.crm.Leads;


/**
 * ServiceImpl object for domain model class LeadStatuses.
 *
 * @see LeadStatuses
 */
@Service("crm.LeadStatusesService")
@Validated
public class LeadStatusesServiceImpl implements LeadStatusesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeadStatusesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("crm.LeadsService")
    private LeadsService leadsService;

    @Autowired
    @Qualifier("crm.LeadStatusesDao")
    private WMGenericDao<LeadStatuses, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LeadStatuses, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public LeadStatuses create(LeadStatuses leadStatuses) {
        LOGGER.debug("Creating a new LeadStatuses with information: {}", leadStatuses);

        LeadStatuses leadStatusesCreated = this.wmGenericDao.create(leadStatuses);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(leadStatusesCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public LeadStatuses getById(Integer leadstatusesId) {
        LOGGER.debug("Finding LeadStatuses by id: {}", leadstatusesId);
        return this.wmGenericDao.findById(leadstatusesId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public LeadStatuses findById(Integer leadstatusesId) {
        LOGGER.debug("Finding LeadStatuses by id: {}", leadstatusesId);
        try {
            return this.wmGenericDao.findById(leadstatusesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LeadStatuses found with id: {}", leadstatusesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<LeadStatuses> findByMultipleIds(List<Integer> leadstatusesIds, boolean orderedReturn) {
        LOGGER.debug("Finding LeadStatuses by ids: {}", leadstatusesIds);

        return this.wmGenericDao.findByMultipleIds(leadstatusesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public LeadStatuses update(LeadStatuses leadStatuses) {
        LOGGER.debug("Updating LeadStatuses with information: {}", leadStatuses);

        this.wmGenericDao.update(leadStatuses);
        this.wmGenericDao.refresh(leadStatuses);

        return leadStatuses;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public LeadStatuses delete(Integer leadstatusesId) {
        LOGGER.debug("Deleting LeadStatuses with id: {}", leadstatusesId);
        LeadStatuses deleted = this.wmGenericDao.findById(leadstatusesId);
        if (deleted == null) {
            LOGGER.debug("No LeadStatuses found with id: {}", leadstatusesId);
            throw new EntityNotFoundException(String.valueOf(leadstatusesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(LeadStatuses leadStatuses) {
        LOGGER.debug("Deleting LeadStatuses with {}", leadStatuses);
        this.wmGenericDao.delete(leadStatuses);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<LeadStatuses> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LeadStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<LeadStatuses> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LeadStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table LeadStatuses to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table LeadStatuses to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Leads> findAssociatedLeadses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated leadses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("leadStatuses.id = '" + id + "'");

        return leadsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LeadsService instance
     */
    protected void setLeadsService(LeadsService service) {
        this.leadsService = service;
    }

}