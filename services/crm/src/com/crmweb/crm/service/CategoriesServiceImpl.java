/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Categories;
import com.crmweb.crm.Opportunities;
import com.crmweb.crm.Projects;
import com.crmweb.crm.Tasks;


/**
 * ServiceImpl object for domain model class Categories.
 *
 * @see Categories
 */
@Service("crm.CategoriesService")
@Validated
public class CategoriesServiceImpl implements CategoriesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CategoriesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("crm.ProjectsService")
    private ProjectsService projectsService;

    @Lazy
    @Autowired
    @Qualifier("crm.OpportunitiesService")
    private OpportunitiesService opportunitiesService;

    @Lazy
    @Autowired
    @Qualifier("crm.TasksService")
    private TasksService tasksService;

    @Autowired
    @Qualifier("crm.CategoriesDao")
    private WMGenericDao<Categories, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Categories, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Categories create(Categories categories) {
        LOGGER.debug("Creating a new Categories with information: {}", categories);

        Categories categoriesCreated = this.wmGenericDao.create(categories);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(categoriesCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Categories getById(Integer categoriesId) {
        LOGGER.debug("Finding Categories by id: {}", categoriesId);
        return this.wmGenericDao.findById(categoriesId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Categories findById(Integer categoriesId) {
        LOGGER.debug("Finding Categories by id: {}", categoriesId);
        try {
            return this.wmGenericDao.findById(categoriesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Categories found with id: {}", categoriesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<Categories> findByMultipleIds(List<Integer> categoriesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Categories by ids: {}", categoriesIds);

        return this.wmGenericDao.findByMultipleIds(categoriesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public Categories update(Categories categories) {
        LOGGER.debug("Updating Categories with information: {}", categories);

        this.wmGenericDao.update(categories);
        this.wmGenericDao.refresh(categories);

        return categories;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Categories delete(Integer categoriesId) {
        LOGGER.debug("Deleting Categories with id: {}", categoriesId);
        Categories deleted = this.wmGenericDao.findById(categoriesId);
        if (deleted == null) {
            LOGGER.debug("No Categories found with id: {}", categoriesId);
            throw new EntityNotFoundException(String.valueOf(categoriesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(Categories categories) {
        LOGGER.debug("Deleting Categories with {}", categories);
        this.wmGenericDao.delete(categories);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Categories> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Categories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Categories> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Categories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table Categories to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table Categories to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Opportunities> findAssociatedOpportunitieses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated opportunitieses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("categories.id = '" + id + "'");

        return opportunitiesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Projects> findAssociatedProjectses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated projectses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("categories.id = '" + id + "'");

        return projectsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Tasks> findAssociatedTaskses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated taskses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("categories.id = '" + id + "'");

        return tasksService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProjectsService instance
     */
    protected void setProjectsService(ProjectsService service) {
        this.projectsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service OpportunitiesService instance
     */
    protected void setOpportunitiesService(OpportunitiesService service) {
        this.opportunitiesService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TasksService instance
     */
    protected void setTasksService(TasksService service) {
        this.tasksService = service;
    }

}