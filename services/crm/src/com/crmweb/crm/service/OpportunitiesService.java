/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Opportunities;
import com.crmweb.crm.Projects;

/**
 * Service object for domain model class {@link Opportunities}.
 */
public interface OpportunitiesService {

    /**
     * Creates a new Opportunities. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Opportunities if any.
     *
     * @param opportunities Details of the Opportunities to be created; value cannot be null.
     * @return The newly created Opportunities.
     */
    Opportunities create(@Valid Opportunities opportunities);


	/**
     * Returns Opportunities by given id if exists.
     *
     * @param opportunitiesId The id of the Opportunities to get; value cannot be null.
     * @return Opportunities associated with the given opportunitiesId.
	 * @throws EntityNotFoundException If no Opportunities is found.
     */
    Opportunities getById(Integer opportunitiesId);

    /**
     * Find and return the Opportunities by given id if exists, returns null otherwise.
     *
     * @param opportunitiesId The id of the Opportunities to get; value cannot be null.
     * @return Opportunities associated with the given opportunitiesId.
     */
    Opportunities findById(Integer opportunitiesId);

	/**
     * Find and return the list of Opportunities by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param opportunitiesIds The id's of the Opportunities to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Opportunities associated with the given opportunitiesIds.
     */
    List<Opportunities> findByMultipleIds(List<Integer> opportunitiesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Opportunities. It replaces all fields of the existing Opportunities with the given opportunities.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Opportunities if any.
     *
     * @param opportunities The details of the Opportunities to be updated; value cannot be null.
     * @return The updated Opportunities.
     * @throws EntityNotFoundException if no Opportunities is found with given input.
     */
    Opportunities update(@Valid Opportunities opportunities);

    /**
     * Deletes an existing Opportunities with the given id.
     *
     * @param opportunitiesId The id of the Opportunities to be deleted; value cannot be null.
     * @return The deleted Opportunities.
     * @throws EntityNotFoundException if no Opportunities found with the given id.
     */
    Opportunities delete(Integer opportunitiesId);

    /**
     * Deletes an existing Opportunities with the given object.
     *
     * @param opportunities The instance of the Opportunities to be deleted; value cannot be null.
     */
    void delete(Opportunities opportunities);

    /**
     * Find all Opportunities matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Opportunities.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Opportunities> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Opportunities matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Opportunities.
     *
     * @see Pageable
     * @see Page
     */
    Page<Opportunities> findAll(String query, Pageable pageable);

    /**
     * Exports all Opportunities matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Opportunities matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Opportunities in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Opportunities.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated projectses for given Opportunities id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Projects instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Projects> findAssociatedProjectses(Integer id, Pageable pageable);

}