/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.FilesOpportunities;

/**
 * Service object for domain model class {@link FilesOpportunities}.
 */
public interface FilesOpportunitiesService {

    /**
     * Creates a new FilesOpportunities. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FilesOpportunities if any.
     *
     * @param filesOpportunities Details of the FilesOpportunities to be created; value cannot be null.
     * @return The newly created FilesOpportunities.
     */
    FilesOpportunities create(@Valid FilesOpportunities filesOpportunities);


	/**
     * Returns FilesOpportunities by given id if exists.
     *
     * @param filesopportunitiesId The id of the FilesOpportunities to get; value cannot be null.
     * @return FilesOpportunities associated with the given filesopportunitiesId.
	 * @throws EntityNotFoundException If no FilesOpportunities is found.
     */
    FilesOpportunities getById(Integer filesopportunitiesId);

    /**
     * Find and return the FilesOpportunities by given id if exists, returns null otherwise.
     *
     * @param filesopportunitiesId The id of the FilesOpportunities to get; value cannot be null.
     * @return FilesOpportunities associated with the given filesopportunitiesId.
     */
    FilesOpportunities findById(Integer filesopportunitiesId);

	/**
     * Find and return the list of FilesOpportunities by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param filesopportunitiesIds The id's of the FilesOpportunities to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return FilesOpportunities associated with the given filesopportunitiesIds.
     */
    List<FilesOpportunities> findByMultipleIds(List<Integer> filesopportunitiesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing FilesOpportunities. It replaces all fields of the existing FilesOpportunities with the given filesOpportunities.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FilesOpportunities if any.
     *
     * @param filesOpportunities The details of the FilesOpportunities to be updated; value cannot be null.
     * @return The updated FilesOpportunities.
     * @throws EntityNotFoundException if no FilesOpportunities is found with given input.
     */
    FilesOpportunities update(@Valid FilesOpportunities filesOpportunities);

    /**
     * Deletes an existing FilesOpportunities with the given id.
     *
     * @param filesopportunitiesId The id of the FilesOpportunities to be deleted; value cannot be null.
     * @return The deleted FilesOpportunities.
     * @throws EntityNotFoundException if no FilesOpportunities found with the given id.
     */
    FilesOpportunities delete(Integer filesopportunitiesId);

    /**
     * Deletes an existing FilesOpportunities with the given object.
     *
     * @param filesOpportunities The instance of the FilesOpportunities to be deleted; value cannot be null.
     */
    void delete(FilesOpportunities filesOpportunities);

    /**
     * Find all FilesOpportunities matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FilesOpportunities.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<FilesOpportunities> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all FilesOpportunities matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FilesOpportunities.
     *
     * @see Pageable
     * @see Page
     */
    Page<FilesOpportunities> findAll(String query, Pageable pageable);

    /**
     * Exports all FilesOpportunities matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all FilesOpportunities matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the FilesOpportunities in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the FilesOpportunities.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}