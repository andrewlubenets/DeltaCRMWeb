/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.TaskProjects;


/**
 * ServiceImpl object for domain model class TaskProjects.
 *
 * @see TaskProjects
 */
@Service("crm.TaskProjectsService")
@Validated
public class TaskProjectsServiceImpl implements TaskProjectsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaskProjectsServiceImpl.class);


    @Autowired
    @Qualifier("crm.TaskProjectsDao")
    private WMGenericDao<TaskProjects, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TaskProjects, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public TaskProjects create(TaskProjects taskProjects) {
        LOGGER.debug("Creating a new TaskProjects with information: {}", taskProjects);

        TaskProjects taskProjectsCreated = this.wmGenericDao.create(taskProjects);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(taskProjectsCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public TaskProjects getById(Integer taskprojectsId) {
        LOGGER.debug("Finding TaskProjects by id: {}", taskprojectsId);
        return this.wmGenericDao.findById(taskprojectsId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public TaskProjects findById(Integer taskprojectsId) {
        LOGGER.debug("Finding TaskProjects by id: {}", taskprojectsId);
        try {
            return this.wmGenericDao.findById(taskprojectsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TaskProjects found with id: {}", taskprojectsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<TaskProjects> findByMultipleIds(List<Integer> taskprojectsIds, boolean orderedReturn) {
        LOGGER.debug("Finding TaskProjects by ids: {}", taskprojectsIds);

        return this.wmGenericDao.findByMultipleIds(taskprojectsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public TaskProjects update(TaskProjects taskProjects) {
        LOGGER.debug("Updating TaskProjects with information: {}", taskProjects);

        this.wmGenericDao.update(taskProjects);
        this.wmGenericDao.refresh(taskProjects);

        return taskProjects;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public TaskProjects delete(Integer taskprojectsId) {
        LOGGER.debug("Deleting TaskProjects with id: {}", taskprojectsId);
        TaskProjects deleted = this.wmGenericDao.findById(taskprojectsId);
        if (deleted == null) {
            LOGGER.debug("No TaskProjects found with id: {}", taskprojectsId);
            throw new EntityNotFoundException(String.valueOf(taskprojectsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(TaskProjects taskProjects) {
        LOGGER.debug("Deleting TaskProjects with {}", taskProjects);
        this.wmGenericDao.delete(taskProjects);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<TaskProjects> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TaskProjects");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<TaskProjects> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TaskProjects");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table TaskProjects to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table TaskProjects to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}