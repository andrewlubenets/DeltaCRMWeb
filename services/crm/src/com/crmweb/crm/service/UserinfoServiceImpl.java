/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Userinfo;


/**
 * ServiceImpl object for domain model class Userinfo.
 *
 * @see Userinfo
 */
@Service("crm.UserinfoService")
@Validated
public class UserinfoServiceImpl implements UserinfoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserinfoServiceImpl.class);


    @Autowired
    @Qualifier("crm.UserinfoDao")
    private WMGenericDao<Userinfo, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Userinfo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Userinfo create(Userinfo userinfo) {
        LOGGER.debug("Creating a new Userinfo with information: {}", userinfo);

        Userinfo userinfoCreated = this.wmGenericDao.create(userinfo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userinfoCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Userinfo getById(Integer userinfoId) {
        LOGGER.debug("Finding Userinfo by id: {}", userinfoId);
        return this.wmGenericDao.findById(userinfoId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Userinfo findById(Integer userinfoId) {
        LOGGER.debug("Finding Userinfo by id: {}", userinfoId);
        try {
            return this.wmGenericDao.findById(userinfoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Userinfo found with id: {}", userinfoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<Userinfo> findByMultipleIds(List<Integer> userinfoIds, boolean orderedReturn) {
        LOGGER.debug("Finding Userinfos by ids: {}", userinfoIds);

        return this.wmGenericDao.findByMultipleIds(userinfoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public Userinfo update(Userinfo userinfo) {
        LOGGER.debug("Updating Userinfo with information: {}", userinfo);

        this.wmGenericDao.update(userinfo);
        this.wmGenericDao.refresh(userinfo);

        return userinfo;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Userinfo delete(Integer userinfoId) {
        LOGGER.debug("Deleting Userinfo with id: {}", userinfoId);
        Userinfo deleted = this.wmGenericDao.findById(userinfoId);
        if (deleted == null) {
            LOGGER.debug("No Userinfo found with id: {}", userinfoId);
            throw new EntityNotFoundException(String.valueOf(userinfoId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(Userinfo userinfo) {
        LOGGER.debug("Deleting Userinfo with {}", userinfo);
        this.wmGenericDao.delete(userinfo);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Userinfo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Userinfos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Userinfo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Userinfos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table Userinfo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table Userinfo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}