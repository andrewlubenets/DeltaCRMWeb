/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.TaskOpportunities;


/**
 * ServiceImpl object for domain model class TaskOpportunities.
 *
 * @see TaskOpportunities
 */
@Service("crm.TaskOpportunitiesService")
@Validated
public class TaskOpportunitiesServiceImpl implements TaskOpportunitiesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaskOpportunitiesServiceImpl.class);


    @Autowired
    @Qualifier("crm.TaskOpportunitiesDao")
    private WMGenericDao<TaskOpportunities, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TaskOpportunities, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public TaskOpportunities create(TaskOpportunities taskOpportunities) {
        LOGGER.debug("Creating a new TaskOpportunities with information: {}", taskOpportunities);

        TaskOpportunities taskOpportunitiesCreated = this.wmGenericDao.create(taskOpportunities);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(taskOpportunitiesCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public TaskOpportunities getById(Integer taskopportunitiesId) {
        LOGGER.debug("Finding TaskOpportunities by id: {}", taskopportunitiesId);
        return this.wmGenericDao.findById(taskopportunitiesId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public TaskOpportunities findById(Integer taskopportunitiesId) {
        LOGGER.debug("Finding TaskOpportunities by id: {}", taskopportunitiesId);
        try {
            return this.wmGenericDao.findById(taskopportunitiesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TaskOpportunities found with id: {}", taskopportunitiesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<TaskOpportunities> findByMultipleIds(List<Integer> taskopportunitiesIds, boolean orderedReturn) {
        LOGGER.debug("Finding TaskOpportunities by ids: {}", taskopportunitiesIds);

        return this.wmGenericDao.findByMultipleIds(taskopportunitiesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public TaskOpportunities update(TaskOpportunities taskOpportunities) {
        LOGGER.debug("Updating TaskOpportunities with information: {}", taskOpportunities);

        this.wmGenericDao.update(taskOpportunities);
        this.wmGenericDao.refresh(taskOpportunities);

        return taskOpportunities;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public TaskOpportunities delete(Integer taskopportunitiesId) {
        LOGGER.debug("Deleting TaskOpportunities with id: {}", taskopportunitiesId);
        TaskOpportunities deleted = this.wmGenericDao.findById(taskopportunitiesId);
        if (deleted == null) {
            LOGGER.debug("No TaskOpportunities found with id: {}", taskopportunitiesId);
            throw new EntityNotFoundException(String.valueOf(taskopportunitiesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(TaskOpportunities taskOpportunities) {
        LOGGER.debug("Deleting TaskOpportunities with {}", taskOpportunities);
        this.wmGenericDao.delete(taskOpportunities);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<TaskOpportunities> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TaskOpportunities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<TaskOpportunities> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TaskOpportunities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table TaskOpportunities to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table TaskOpportunities to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}