/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Departments;
import com.crmweb.crm.Posts;


/**
 * ServiceImpl object for domain model class Departments.
 *
 * @see Departments
 */
@Service("crm.DepartmentsService")
@Validated
public class DepartmentsServiceImpl implements DepartmentsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("crm.PostsService")
    private PostsService postsService;

    @Autowired
    @Qualifier("crm.DepartmentsDao")
    private WMGenericDao<Departments, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Departments, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Departments create(Departments departments) {
        LOGGER.debug("Creating a new Departments with information: {}", departments);

        Departments departmentsCreated = this.wmGenericDao.create(departments);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(departmentsCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Departments getById(Integer departmentsId) {
        LOGGER.debug("Finding Departments by id: {}", departmentsId);
        return this.wmGenericDao.findById(departmentsId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Departments findById(Integer departmentsId) {
        LOGGER.debug("Finding Departments by id: {}", departmentsId);
        try {
            return this.wmGenericDao.findById(departmentsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Departments found with id: {}", departmentsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<Departments> findByMultipleIds(List<Integer> departmentsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Departments by ids: {}", departmentsIds);

        return this.wmGenericDao.findByMultipleIds(departmentsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public Departments update(Departments departments) {
        LOGGER.debug("Updating Departments with information: {}", departments);

        this.wmGenericDao.update(departments);
        this.wmGenericDao.refresh(departments);

        return departments;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Departments delete(Integer departmentsId) {
        LOGGER.debug("Deleting Departments with id: {}", departmentsId);
        Departments deleted = this.wmGenericDao.findById(departmentsId);
        if (deleted == null) {
            LOGGER.debug("No Departments found with id: {}", departmentsId);
            throw new EntityNotFoundException(String.valueOf(departmentsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(Departments departments) {
        LOGGER.debug("Deleting Departments with {}", departments);
        this.wmGenericDao.delete(departments);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Departments> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Departments> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table Departments to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table Departments to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Posts> findAssociatedPostses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated postses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("departments.id = '" + id + "'");

        return postsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PostsService instance
     */
    protected void setPostsService(PostsService service) {
        this.postsService = service;
    }

}