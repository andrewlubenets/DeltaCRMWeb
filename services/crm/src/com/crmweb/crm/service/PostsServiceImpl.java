/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Posts;


/**
 * ServiceImpl object for domain model class Posts.
 *
 * @see Posts
 */
@Service("crm.PostsService")
@Validated
public class PostsServiceImpl implements PostsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PostsServiceImpl.class);


    @Autowired
    @Qualifier("crm.PostsDao")
    private WMGenericDao<Posts, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Posts, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Posts create(Posts posts) {
        LOGGER.debug("Creating a new Posts with information: {}", posts);

        Posts postsCreated = this.wmGenericDao.create(posts);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(postsCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Posts getById(Integer postsId) {
        LOGGER.debug("Finding Posts by id: {}", postsId);
        return this.wmGenericDao.findById(postsId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Posts findById(Integer postsId) {
        LOGGER.debug("Finding Posts by id: {}", postsId);
        try {
            return this.wmGenericDao.findById(postsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Posts found with id: {}", postsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<Posts> findByMultipleIds(List<Integer> postsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Posts by ids: {}", postsIds);

        return this.wmGenericDao.findByMultipleIds(postsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public Posts update(Posts posts) {
        LOGGER.debug("Updating Posts with information: {}", posts);

        this.wmGenericDao.update(posts);
        this.wmGenericDao.refresh(posts);

        return posts;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Posts delete(Integer postsId) {
        LOGGER.debug("Deleting Posts with id: {}", postsId);
        Posts deleted = this.wmGenericDao.findById(postsId);
        if (deleted == null) {
            LOGGER.debug("No Posts found with id: {}", postsId);
            throw new EntityNotFoundException(String.valueOf(postsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(Posts posts) {
        LOGGER.debug("Deleting Posts with {}", posts);
        this.wmGenericDao.delete(posts);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Posts> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Posts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Posts> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Posts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table Posts to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table Posts to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}