/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Stages;

/**
 * Service object for domain model class {@link Stages}.
 */
public interface StagesService {

    /**
     * Creates a new Stages. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Stages if any.
     *
     * @param stages Details of the Stages to be created; value cannot be null.
     * @return The newly created Stages.
     */
    Stages create(@Valid Stages stages);


	/**
     * Returns Stages by given id if exists.
     *
     * @param stagesId The id of the Stages to get; value cannot be null.
     * @return Stages associated with the given stagesId.
	 * @throws EntityNotFoundException If no Stages is found.
     */
    Stages getById(Integer stagesId);

    /**
     * Find and return the Stages by given id if exists, returns null otherwise.
     *
     * @param stagesId The id of the Stages to get; value cannot be null.
     * @return Stages associated with the given stagesId.
     */
    Stages findById(Integer stagesId);

	/**
     * Find and return the list of Stages by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param stagesIds The id's of the Stages to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Stages associated with the given stagesIds.
     */
    List<Stages> findByMultipleIds(List<Integer> stagesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Stages. It replaces all fields of the existing Stages with the given stages.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Stages if any.
     *
     * @param stages The details of the Stages to be updated; value cannot be null.
     * @return The updated Stages.
     * @throws EntityNotFoundException if no Stages is found with given input.
     */
    Stages update(@Valid Stages stages);

    /**
     * Deletes an existing Stages with the given id.
     *
     * @param stagesId The id of the Stages to be deleted; value cannot be null.
     * @return The deleted Stages.
     * @throws EntityNotFoundException if no Stages found with the given id.
     */
    Stages delete(Integer stagesId);

    /**
     * Deletes an existing Stages with the given object.
     *
     * @param stages The instance of the Stages to be deleted; value cannot be null.
     */
    void delete(Stages stages);

    /**
     * Find all Stages matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Stages.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Stages> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Stages matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Stages.
     *
     * @see Pageable
     * @see Page
     */
    Page<Stages> findAll(String query, Pageable pageable);

    /**
     * Exports all Stages matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Stages matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Stages in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Stages.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}