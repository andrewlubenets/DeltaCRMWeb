/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Opportunities;
import com.crmweb.crm.Projects;


/**
 * ServiceImpl object for domain model class Opportunities.
 *
 * @see Opportunities
 */
@Service("crm.OpportunitiesService")
@Validated
public class OpportunitiesServiceImpl implements OpportunitiesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OpportunitiesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("crm.ProjectsService")
    private ProjectsService projectsService;

    @Autowired
    @Qualifier("crm.OpportunitiesDao")
    private WMGenericDao<Opportunities, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Opportunities, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Opportunities create(Opportunities opportunities) {
        LOGGER.debug("Creating a new Opportunities with information: {}", opportunities);

        Opportunities opportunitiesCreated = this.wmGenericDao.create(opportunities);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(opportunitiesCreated);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Opportunities getById(Integer opportunitiesId) {
        LOGGER.debug("Finding Opportunities by id: {}", opportunitiesId);
        return this.wmGenericDao.findById(opportunitiesId);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Opportunities findById(Integer opportunitiesId) {
        LOGGER.debug("Finding Opportunities by id: {}", opportunitiesId);
        try {
            return this.wmGenericDao.findById(opportunitiesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Opportunities found with id: {}", opportunitiesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public List<Opportunities> findByMultipleIds(List<Integer> opportunitiesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Opportunities by ids: {}", opportunitiesIds);

        return this.wmGenericDao.findByMultipleIds(opportunitiesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "crmTransactionManager")
    @Override
    public Opportunities update(Opportunities opportunities) {
        LOGGER.debug("Updating Opportunities with information: {}", opportunities);

        this.wmGenericDao.update(opportunities);
        this.wmGenericDao.refresh(opportunities);

        return opportunities;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public Opportunities delete(Integer opportunitiesId) {
        LOGGER.debug("Deleting Opportunities with id: {}", opportunitiesId);
        Opportunities deleted = this.wmGenericDao.findById(opportunitiesId);
        if (deleted == null) {
            LOGGER.debug("No Opportunities found with id: {}", opportunitiesId);
            throw new EntityNotFoundException(String.valueOf(opportunitiesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "crmTransactionManager")
    @Override
    public void delete(Opportunities opportunities) {
        LOGGER.debug("Deleting Opportunities with {}", opportunities);
        this.wmGenericDao.delete(opportunities);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Opportunities> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Opportunities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Opportunities> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Opportunities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service crm for table Opportunities to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service crm for table Opportunities to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "crmTransactionManager")
    @Override
    public Page<Projects> findAssociatedProjectses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated projectses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("opportunities.id = '" + id + "'");

        return projectsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProjectsService instance
     */
    protected void setProjectsService(ProjectsService service) {
        this.projectsService = service;
    }

}