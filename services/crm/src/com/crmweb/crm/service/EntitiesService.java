/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.crmweb.crm.Departments;
import com.crmweb.crm.Entities;
import com.crmweb.crm.Locations;
import com.crmweb.crm.Posts;

/**
 * Service object for domain model class {@link Entities}.
 */
public interface EntitiesService {

    /**
     * Creates a new Entities. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Entities if any.
     *
     * @param entities Details of the Entities to be created; value cannot be null.
     * @return The newly created Entities.
     */
    Entities create(@Valid Entities entities);


	/**
     * Returns Entities by given id if exists.
     *
     * @param entitiesId The id of the Entities to get; value cannot be null.
     * @return Entities associated with the given entitiesId.
	 * @throws EntityNotFoundException If no Entities is found.
     */
    Entities getById(Integer entitiesId);

    /**
     * Find and return the Entities by given id if exists, returns null otherwise.
     *
     * @param entitiesId The id of the Entities to get; value cannot be null.
     * @return Entities associated with the given entitiesId.
     */
    Entities findById(Integer entitiesId);

	/**
     * Find and return the list of Entities by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param entitiesIds The id's of the Entities to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Entities associated with the given entitiesIds.
     */
    List<Entities> findByMultipleIds(List<Integer> entitiesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Entities. It replaces all fields of the existing Entities with the given entities.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Entities if any.
     *
     * @param entities The details of the Entities to be updated; value cannot be null.
     * @return The updated Entities.
     * @throws EntityNotFoundException if no Entities is found with given input.
     */
    Entities update(@Valid Entities entities);

    /**
     * Deletes an existing Entities with the given id.
     *
     * @param entitiesId The id of the Entities to be deleted; value cannot be null.
     * @return The deleted Entities.
     * @throws EntityNotFoundException if no Entities found with the given id.
     */
    Entities delete(Integer entitiesId);

    /**
     * Deletes an existing Entities with the given object.
     *
     * @param entities The instance of the Entities to be deleted; value cannot be null.
     */
    void delete(Entities entities);

    /**
     * Find all Entities matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Entities.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Entities> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Entities matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Entities.
     *
     * @see Pageable
     * @see Page
     */
    Page<Entities> findAll(String query, Pageable pageable);

    /**
     * Exports all Entities matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Entities matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Entities in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Entities.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated departmentses for given Entities id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Departments instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Departments> findAssociatedDepartmentses(Integer id, Pageable pageable);

    /*
     * Returns the associated locationses for given Entities id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Locations instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Locations> findAssociatedLocationses(Integer id, Pageable pageable);

    /*
     * Returns the associated postses for given Entities id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Posts instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Posts> findAssociatedPostses(Integer id, Pageable pageable);

}