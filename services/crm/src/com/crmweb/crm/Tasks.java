/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Tasks generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`tasks`")
public class Tasks implements Serializable {

    private Integer id;
    private String name;
    private Integer assignedtoUserid;
    private Integer categoryid;
    private LocalDateTime duedate;
    private LocalDateTime startdate;
    private String progress;
    private String priority;
    private String status;
    private String relatedto;
    private String description;
    private Integer relatedtoid;
    private String relatedtotype;
    private Integer createdby;
    private LocalDateTime dateCreation;
    private LocalDateTime dateModification;
    private Integer modifyby;
    private Categories categories;
    private Users users;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`name`", nullable = true, length = 255)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "`assignedto_userid`", nullable = true, scale = 0, precision = 10)
    public Integer getAssignedtoUserid() {
        return this.assignedtoUserid;
    }

    public void setAssignedtoUserid(Integer assignedtoUserid) {
        this.assignedtoUserid = assignedtoUserid;
    }

    @Column(name = "`categoryid`", nullable = true, scale = 0, precision = 10)
    public Integer getCategoryid() {
        return this.categoryid;
    }

    public void setCategoryid(Integer categoryid) {
        this.categoryid = categoryid;
    }

    @Column(name = "`duedate`", nullable = true)
    public LocalDateTime getDuedate() {
        return this.duedate;
    }

    public void setDuedate(LocalDateTime duedate) {
        this.duedate = duedate;
    }

    @Column(name = "`startdate`", nullable = true)
    public LocalDateTime getStartdate() {
        return this.startdate;
    }

    public void setStartdate(LocalDateTime startdate) {
        this.startdate = startdate;
    }

    @Column(name = "`progress`", nullable = true, length = 255)
    public String getProgress() {
        return this.progress;
    }

    public void setProgress(String progress) {
        this.progress = progress;
    }

    @Column(name = "`priority`", nullable = true, length = 255)
    public String getPriority() {
        return this.priority;
    }

    public void setPriority(String priority) {
        this.priority = priority;
    }

    @Column(name = "`status`", nullable = true, length = 255)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Column(name = "`relatedto`", nullable = true, length = 255)
    public String getRelatedto() {
        return this.relatedto;
    }

    public void setRelatedto(String relatedto) {
        this.relatedto = relatedto;
    }

    @Column(name = "`description`", nullable = true, length = 255)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "`relatedtoid`", nullable = true, scale = 0, precision = 10)
    public Integer getRelatedtoid() {
        return this.relatedtoid;
    }

    public void setRelatedtoid(Integer relatedtoid) {
        this.relatedtoid = relatedtoid;
    }

    @Column(name = "`relatedtotype`", nullable = true, length = 255)
    public String getRelatedtotype() {
        return this.relatedtotype;
    }

    public void setRelatedtotype(String relatedtotype) {
        this.relatedtotype = relatedtotype;
    }

    @Column(name = "`createdby`", nullable = true, scale = 0, precision = 10)
    public Integer getCreatedby() {
        return this.createdby;
    }

    public void setCreatedby(Integer createdby) {
        this.createdby = createdby;
    }

    @Column(name = "`date_creation`", nullable = true)
    public LocalDateTime getDateCreation() {
        return this.dateCreation;
    }

    public void setDateCreation(LocalDateTime dateCreation) {
        this.dateCreation = dateCreation;
    }

    @Column(name = "`date_modification`", nullable = true)
    public LocalDateTime getDateModification() {
        return this.dateModification;
    }

    public void setDateModification(LocalDateTime dateModification) {
        this.dateModification = dateModification;
    }

    @Column(name = "`modifyby`", nullable = true, scale = 0, precision = 10)
    public Integer getModifyby() {
        return this.modifyby;
    }

    public void setModifyby(Integer modifyby) {
        this.modifyby = modifyby;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`categoryid`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`tasks_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Categories getCategories() {
        return this.categories;
    }

    public void setCategories(Categories categories) {
        if(categories != null) {
            this.categoryid = categories.getId();
        }

        this.categories = categories;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`assignedto_userid`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`tasks_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.assignedtoUserid = users.getId();
        }

        this.users = users;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Tasks)) return false;
        final Tasks tasks = (Tasks) o;
        return Objects.equals(getId(), tasks.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}