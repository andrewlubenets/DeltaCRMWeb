/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.crmweb.crm.Categories;
import com.crmweb.crm.Opportunities;
import com.crmweb.crm.Projects;
import com.crmweb.crm.Tasks;
import com.crmweb.crm.service.CategoriesService;


/**
 * Controller object for domain model class Categories.
 * @see Categories
 */
@RestController("crm.CategoriesController")
@Api(value = "CategoriesController", description = "Exposes APIs to work with Categories resource.")
@RequestMapping("/crm/Categories")
public class CategoriesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CategoriesController.class);

    @Autowired
	@Qualifier("crm.CategoriesService")
	private CategoriesService categoriesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Categories instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Categories createCategories(@RequestBody Categories categories) {
		LOGGER.debug("Create Categories with information: {}" , categories);

		categories = categoriesService.create(categories);
		LOGGER.debug("Created Categories with information: {}" , categories);

	    return categories;
	}

    @ApiOperation(value = "Returns the Categories instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Categories getCategories(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Categories with id: {}" , id);

        Categories foundCategories = categoriesService.getById(id);
        LOGGER.debug("Categories details with id: {}" , foundCategories);

        return foundCategories;
    }

    @ApiOperation(value = "Updates the Categories instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Categories editCategories(@PathVariable("id") Integer id, @RequestBody Categories categories) {
        LOGGER.debug("Editing Categories with id: {}" , categories.getId());

        categories.setId(id);
        categories = categoriesService.update(categories);
        LOGGER.debug("Categories details with id: {}" , categories);

        return categories;
    }

    @ApiOperation(value = "Deletes the Categories instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCategories(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Categories with id: {}" , id);

        Categories deletedCategories = categoriesService.delete(id);

        return deletedCategories != null;
    }

    /**
     * @deprecated Use {@link #findCategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Categories instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Categories> searchCategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Categories list by query filter:{}", (Object) queryFilters);
        return categoriesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Categories instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Categories> findCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Categories list by filter:", query);
        return categoriesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Categories instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Categories> filterCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Categories list by filter", query);
        return categoriesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return categoriesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCategoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Categories.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> categoriesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Categories instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Categories");
		return categoriesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCategoriesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return categoriesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/opportunitieses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the opportunitieses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Opportunities> findAssociatedOpportunitieses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated opportunitieses");
        return categoriesService.findAssociatedOpportunitieses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/projectses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the projectses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Projects> findAssociatedProjectses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated projectses");
        return categoriesService.findAssociatedProjectses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/taskses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the taskses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tasks> findAssociatedTaskses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated taskses");
        return categoriesService.findAssociatedTaskses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CategoriesService instance
	 */
	protected void setCategoriesService(CategoriesService service) {
		this.categoriesService = service;
	}

}