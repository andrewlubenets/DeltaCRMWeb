/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.crmweb.crm.TaskProjects;
import com.crmweb.crm.service.TaskProjectsService;


/**
 * Controller object for domain model class TaskProjects.
 * @see TaskProjects
 */
@RestController("crm.TaskProjectsController")
@Api(value = "TaskProjectsController", description = "Exposes APIs to work with TaskProjects resource.")
@RequestMapping("/crm/TaskProjects")
public class TaskProjectsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaskProjectsController.class);

    @Autowired
	@Qualifier("crm.TaskProjectsService")
	private TaskProjectsService taskProjectsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TaskProjects instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskProjects createTaskProjects(@RequestBody TaskProjects taskProjects) {
		LOGGER.debug("Create TaskProjects with information: {}" , taskProjects);

		taskProjects = taskProjectsService.create(taskProjects);
		LOGGER.debug("Created TaskProjects with information: {}" , taskProjects);

	    return taskProjects;
	}

    @ApiOperation(value = "Returns the TaskProjects instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskProjects getTaskProjects(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TaskProjects with id: {}" , id);

        TaskProjects foundTaskProjects = taskProjectsService.getById(id);
        LOGGER.debug("TaskProjects details with id: {}" , foundTaskProjects);

        return foundTaskProjects;
    }

    @ApiOperation(value = "Updates the TaskProjects instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskProjects editTaskProjects(@PathVariable("id") Integer id, @RequestBody TaskProjects taskProjects) {
        LOGGER.debug("Editing TaskProjects with id: {}" , taskProjects.getId());

        taskProjects.setId(id);
        taskProjects = taskProjectsService.update(taskProjects);
        LOGGER.debug("TaskProjects details with id: {}" , taskProjects);

        return taskProjects;
    }

    @ApiOperation(value = "Deletes the TaskProjects instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTaskProjects(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TaskProjects with id: {}" , id);

        TaskProjects deletedTaskProjects = taskProjectsService.delete(id);

        return deletedTaskProjects != null;
    }

    /**
     * @deprecated Use {@link #findTaskProjects(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TaskProjects instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaskProjects> searchTaskProjectsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TaskProjects list by query filter:{}", (Object) queryFilters);
        return taskProjectsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaskProjects instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaskProjects> findTaskProjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaskProjects list by filter:", query);
        return taskProjectsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaskProjects instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaskProjects> filterTaskProjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaskProjects list by filter", query);
        return taskProjectsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTaskProjects(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return taskProjectsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTaskProjectsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TaskProjects.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> taskProjectsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TaskProjects instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTaskProjects( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TaskProjects");
		return taskProjectsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTaskProjectsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return taskProjectsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaskProjectsService instance
	 */
	protected void setTaskProjectsService(TaskProjectsService service) {
		this.taskProjectsService = service;
	}

}