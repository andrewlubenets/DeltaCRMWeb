/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.crmweb.crm.Contacts;
import com.crmweb.crm.Leads;
import com.crmweb.crm.Organizations;
import com.crmweb.crm.service.OrganizationsService;


/**
 * Controller object for domain model class Organizations.
 * @see Organizations
 */
@RestController("crm.OrganizationsController")
@Api(value = "OrganizationsController", description = "Exposes APIs to work with Organizations resource.")
@RequestMapping("/crm/Organizations")
public class OrganizationsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrganizationsController.class);

    @Autowired
	@Qualifier("crm.OrganizationsService")
	private OrganizationsService organizationsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Organizations instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Organizations createOrganizations(@RequestBody Organizations organizations) {
		LOGGER.debug("Create Organizations with information: {}" , organizations);

		organizations = organizationsService.create(organizations);
		LOGGER.debug("Created Organizations with information: {}" , organizations);

	    return organizations;
	}

    @ApiOperation(value = "Returns the Organizations instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Organizations getOrganizations(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Organizations with id: {}" , id);

        Organizations foundOrganizations = organizationsService.getById(id);
        LOGGER.debug("Organizations details with id: {}" , foundOrganizations);

        return foundOrganizations;
    }

    @ApiOperation(value = "Updates the Organizations instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Organizations editOrganizations(@PathVariable("id") Integer id, @RequestBody Organizations organizations) {
        LOGGER.debug("Editing Organizations with id: {}" , organizations.getId());

        organizations.setId(id);
        organizations = organizationsService.update(organizations);
        LOGGER.debug("Organizations details with id: {}" , organizations);

        return organizations;
    }

    @ApiOperation(value = "Deletes the Organizations instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOrganizations(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Organizations with id: {}" , id);

        Organizations deletedOrganizations = organizationsService.delete(id);

        return deletedOrganizations != null;
    }

    /**
     * @deprecated Use {@link #findOrganizations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Organizations instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Organizations> searchOrganizationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Organizations list by query filter:{}", (Object) queryFilters);
        return organizationsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Organizations instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Organizations> findOrganizations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Organizations list by filter:", query);
        return organizationsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Organizations instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Organizations> filterOrganizations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Organizations list by filter", query);
        return organizationsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOrganizations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return organizationsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOrganizationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Organizations.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> organizationsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Organizations instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOrganizations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Organizations");
		return organizationsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOrganizationsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return organizationsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/contactses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the contactses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Contacts> findAssociatedContactses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated contactses");
        return organizationsService.findAssociatedContactses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/leadses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the leadses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Leads> findAssociatedLeadses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated leadses");
        return organizationsService.findAssociatedLeadses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OrganizationsService instance
	 */
	protected void setOrganizationsService(OrganizationsService service) {
		this.organizationsService = service;
	}

}