/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.crmweb.crm.Opportunities;
import com.crmweb.crm.OpportunityStates;
import com.crmweb.crm.service.OpportunityStatesService;


/**
 * Controller object for domain model class OpportunityStates.
 * @see OpportunityStates
 */
@RestController("crm.OpportunityStatesController")
@Api(value = "OpportunityStatesController", description = "Exposes APIs to work with OpportunityStates resource.")
@RequestMapping("/crm/OpportunityStates")
public class OpportunityStatesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OpportunityStatesController.class);

    @Autowired
	@Qualifier("crm.OpportunityStatesService")
	private OpportunityStatesService opportunityStatesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new OpportunityStates instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OpportunityStates createOpportunityStates(@RequestBody OpportunityStates opportunityStates) {
		LOGGER.debug("Create OpportunityStates with information: {}" , opportunityStates);

		opportunityStates = opportunityStatesService.create(opportunityStates);
		LOGGER.debug("Created OpportunityStates with information: {}" , opportunityStates);

	    return opportunityStates;
	}

    @ApiOperation(value = "Returns the OpportunityStates instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OpportunityStates getOpportunityStates(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting OpportunityStates with id: {}" , id);

        OpportunityStates foundOpportunityStates = opportunityStatesService.getById(id);
        LOGGER.debug("OpportunityStates details with id: {}" , foundOpportunityStates);

        return foundOpportunityStates;
    }

    @ApiOperation(value = "Updates the OpportunityStates instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OpportunityStates editOpportunityStates(@PathVariable("id") Integer id, @RequestBody OpportunityStates opportunityStates) {
        LOGGER.debug("Editing OpportunityStates with id: {}" , opportunityStates.getId());

        opportunityStates.setId(id);
        opportunityStates = opportunityStatesService.update(opportunityStates);
        LOGGER.debug("OpportunityStates details with id: {}" , opportunityStates);

        return opportunityStates;
    }

    @ApiOperation(value = "Deletes the OpportunityStates instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOpportunityStates(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting OpportunityStates with id: {}" , id);

        OpportunityStates deletedOpportunityStates = opportunityStatesService.delete(id);

        return deletedOpportunityStates != null;
    }

    /**
     * @deprecated Use {@link #findOpportunityStates(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OpportunityStates instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OpportunityStates> searchOpportunityStatesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OpportunityStates list by query filter:{}", (Object) queryFilters);
        return opportunityStatesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OpportunityStates instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OpportunityStates> findOpportunityStates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OpportunityStates list by filter:", query);
        return opportunityStatesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OpportunityStates instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OpportunityStates> filterOpportunityStates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OpportunityStates list by filter", query);
        return opportunityStatesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOpportunityStates(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return opportunityStatesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOpportunityStatesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = OpportunityStates.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> opportunityStatesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of OpportunityStates instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOpportunityStates( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting OpportunityStates");
		return opportunityStatesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOpportunityStatesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return opportunityStatesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/opportunitieses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the opportunitieses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Opportunities> findAssociatedOpportunitieses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated opportunitieses");
        return opportunityStatesService.findAssociatedOpportunitieses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OpportunityStatesService instance
	 */
	protected void setOpportunityStatesService(OpportunityStatesService service) {
		this.opportunityStatesService = service;
	}

}