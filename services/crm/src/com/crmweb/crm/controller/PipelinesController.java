/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.crmweb.crm.Opportunities;
import com.crmweb.crm.Pipelines;
import com.crmweb.crm.Stages;
import com.crmweb.crm.service.PipelinesService;


/**
 * Controller object for domain model class Pipelines.
 * @see Pipelines
 */
@RestController("crm.PipelinesController")
@Api(value = "PipelinesController", description = "Exposes APIs to work with Pipelines resource.")
@RequestMapping("/crm/Pipelines")
public class PipelinesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PipelinesController.class);

    @Autowired
	@Qualifier("crm.PipelinesService")
	private PipelinesService pipelinesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Pipelines instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Pipelines createPipelines(@RequestBody Pipelines pipelines) {
		LOGGER.debug("Create Pipelines with information: {}" , pipelines);

		pipelines = pipelinesService.create(pipelines);
		LOGGER.debug("Created Pipelines with information: {}" , pipelines);

	    return pipelines;
	}

    @ApiOperation(value = "Returns the Pipelines instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Pipelines getPipelines(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Pipelines with id: {}" , id);

        Pipelines foundPipelines = pipelinesService.getById(id);
        LOGGER.debug("Pipelines details with id: {}" , foundPipelines);

        return foundPipelines;
    }

    @ApiOperation(value = "Updates the Pipelines instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Pipelines editPipelines(@PathVariable("id") Integer id, @RequestBody Pipelines pipelines) {
        LOGGER.debug("Editing Pipelines with id: {}" , pipelines.getId());

        pipelines.setId(id);
        pipelines = pipelinesService.update(pipelines);
        LOGGER.debug("Pipelines details with id: {}" , pipelines);

        return pipelines;
    }

    @ApiOperation(value = "Deletes the Pipelines instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePipelines(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Pipelines with id: {}" , id);

        Pipelines deletedPipelines = pipelinesService.delete(id);

        return deletedPipelines != null;
    }

    /**
     * @deprecated Use {@link #findPipelines(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Pipelines instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Pipelines> searchPipelinesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Pipelines list by query filter:{}", (Object) queryFilters);
        return pipelinesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Pipelines instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Pipelines> findPipelines(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Pipelines list by filter:", query);
        return pipelinesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Pipelines instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Pipelines> filterPipelines(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Pipelines list by filter", query);
        return pipelinesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPipelines(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return pipelinesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPipelinesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Pipelines.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> pipelinesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Pipelines instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPipelines( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Pipelines");
		return pipelinesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPipelinesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return pipelinesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/opportunitieses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the opportunitieses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Opportunities> findAssociatedOpportunitieses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated opportunitieses");
        return pipelinesService.findAssociatedOpportunitieses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/stageses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the stageses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Stages> findAssociatedStageses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated stageses");
        return pipelinesService.findAssociatedStageses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PipelinesService instance
	 */
	protected void setPipelinesService(PipelinesService service) {
		this.pipelinesService = service;
	}

}