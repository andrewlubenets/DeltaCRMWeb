/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.crmweb.crm.LeadSources;
import com.crmweb.crm.Leads;
import com.crmweb.crm.service.LeadSourcesService;


/**
 * Controller object for domain model class LeadSources.
 * @see LeadSources
 */
@RestController("crm.LeadSourcesController")
@Api(value = "LeadSourcesController", description = "Exposes APIs to work with LeadSources resource.")
@RequestMapping("/crm/LeadSources")
public class LeadSourcesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeadSourcesController.class);

    @Autowired
	@Qualifier("crm.LeadSourcesService")
	private LeadSourcesService leadSourcesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LeadSources instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeadSources createLeadSources(@RequestBody LeadSources leadSources) {
		LOGGER.debug("Create LeadSources with information: {}" , leadSources);

		leadSources = leadSourcesService.create(leadSources);
		LOGGER.debug("Created LeadSources with information: {}" , leadSources);

	    return leadSources;
	}

    @ApiOperation(value = "Returns the LeadSources instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeadSources getLeadSources(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LeadSources with id: {}" , id);

        LeadSources foundLeadSources = leadSourcesService.getById(id);
        LOGGER.debug("LeadSources details with id: {}" , foundLeadSources);

        return foundLeadSources;
    }

    @ApiOperation(value = "Updates the LeadSources instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeadSources editLeadSources(@PathVariable("id") Integer id, @RequestBody LeadSources leadSources) {
        LOGGER.debug("Editing LeadSources with id: {}" , leadSources.getId());

        leadSources.setId(id);
        leadSources = leadSourcesService.update(leadSources);
        LOGGER.debug("LeadSources details with id: {}" , leadSources);

        return leadSources;
    }

    @ApiOperation(value = "Deletes the LeadSources instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLeadSources(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LeadSources with id: {}" , id);

        LeadSources deletedLeadSources = leadSourcesService.delete(id);

        return deletedLeadSources != null;
    }

    /**
     * @deprecated Use {@link #findLeadSources(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LeadSources instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeadSources> searchLeadSourcesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LeadSources list by query filter:{}", (Object) queryFilters);
        return leadSourcesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LeadSources instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeadSources> findLeadSources(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LeadSources list by filter:", query);
        return leadSourcesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LeadSources instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeadSources> filterLeadSources(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LeadSources list by filter", query);
        return leadSourcesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLeadSources(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return leadSourcesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportLeadSourcesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LeadSources.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> leadSourcesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LeadSources instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLeadSources( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LeadSources");
		return leadSourcesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLeadSourcesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return leadSourcesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/leadses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the leadses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Leads> findAssociatedLeadses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated leadses");
        return leadSourcesService.findAssociatedLeadses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LeadSourcesService instance
	 */
	protected void setLeadSourcesService(LeadSourcesService service) {
		this.leadSourcesService = service;
	}

}