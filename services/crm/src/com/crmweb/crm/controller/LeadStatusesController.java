/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.crmweb.crm.LeadStatuses;
import com.crmweb.crm.Leads;
import com.crmweb.crm.service.LeadStatusesService;


/**
 * Controller object for domain model class LeadStatuses.
 * @see LeadStatuses
 */
@RestController("crm.LeadStatusesController")
@Api(value = "LeadStatusesController", description = "Exposes APIs to work with LeadStatuses resource.")
@RequestMapping("/crm/LeadStatuses")
public class LeadStatusesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeadStatusesController.class);

    @Autowired
	@Qualifier("crm.LeadStatusesService")
	private LeadStatusesService leadStatusesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LeadStatuses instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeadStatuses createLeadStatuses(@RequestBody LeadStatuses leadStatuses) {
		LOGGER.debug("Create LeadStatuses with information: {}" , leadStatuses);

		leadStatuses = leadStatusesService.create(leadStatuses);
		LOGGER.debug("Created LeadStatuses with information: {}" , leadStatuses);

	    return leadStatuses;
	}

    @ApiOperation(value = "Returns the LeadStatuses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeadStatuses getLeadStatuses(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LeadStatuses with id: {}" , id);

        LeadStatuses foundLeadStatuses = leadStatusesService.getById(id);
        LOGGER.debug("LeadStatuses details with id: {}" , foundLeadStatuses);

        return foundLeadStatuses;
    }

    @ApiOperation(value = "Updates the LeadStatuses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeadStatuses editLeadStatuses(@PathVariable("id") Integer id, @RequestBody LeadStatuses leadStatuses) {
        LOGGER.debug("Editing LeadStatuses with id: {}" , leadStatuses.getId());

        leadStatuses.setId(id);
        leadStatuses = leadStatusesService.update(leadStatuses);
        LOGGER.debug("LeadStatuses details with id: {}" , leadStatuses);

        return leadStatuses;
    }

    @ApiOperation(value = "Deletes the LeadStatuses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLeadStatuses(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LeadStatuses with id: {}" , id);

        LeadStatuses deletedLeadStatuses = leadStatusesService.delete(id);

        return deletedLeadStatuses != null;
    }

    /**
     * @deprecated Use {@link #findLeadStatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LeadStatuses instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeadStatuses> searchLeadStatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LeadStatuses list by query filter:{}", (Object) queryFilters);
        return leadStatusesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LeadStatuses instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeadStatuses> findLeadStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LeadStatuses list by filter:", query);
        return leadStatusesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LeadStatuses instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeadStatuses> filterLeadStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LeadStatuses list by filter", query);
        return leadStatusesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLeadStatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return leadStatusesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportLeadStatusesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LeadStatuses.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> leadStatusesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LeadStatuses instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLeadStatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LeadStatuses");
		return leadStatusesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLeadStatusesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return leadStatusesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/leadses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the leadses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Leads> findAssociatedLeadses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated leadses");
        return leadStatusesService.findAssociatedLeadses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LeadStatusesService instance
	 */
	protected void setLeadStatusesService(LeadStatusesService service) {
		this.leadStatusesService = service;
	}

}