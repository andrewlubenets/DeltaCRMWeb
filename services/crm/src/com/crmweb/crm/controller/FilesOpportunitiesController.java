/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.crmweb.crm.FilesOpportunities;
import com.crmweb.crm.service.FilesOpportunitiesService;


/**
 * Controller object for domain model class FilesOpportunities.
 * @see FilesOpportunities
 */
@RestController("crm.FilesOpportunitiesController")
@Api(value = "FilesOpportunitiesController", description = "Exposes APIs to work with FilesOpportunities resource.")
@RequestMapping("/crm/FilesOpportunities")
public class FilesOpportunitiesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilesOpportunitiesController.class);

    @Autowired
	@Qualifier("crm.FilesOpportunitiesService")
	private FilesOpportunitiesService filesOpportunitiesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new FilesOpportunities instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FilesOpportunities createFilesOpportunities(@RequestBody FilesOpportunities filesOpportunities) {
		LOGGER.debug("Create FilesOpportunities with information: {}" , filesOpportunities);

		filesOpportunities = filesOpportunitiesService.create(filesOpportunities);
		LOGGER.debug("Created FilesOpportunities with information: {}" , filesOpportunities);

	    return filesOpportunities;
	}

    @ApiOperation(value = "Returns the FilesOpportunities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FilesOpportunities getFilesOpportunities(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting FilesOpportunities with id: {}" , id);

        FilesOpportunities foundFilesOpportunities = filesOpportunitiesService.getById(id);
        LOGGER.debug("FilesOpportunities details with id: {}" , foundFilesOpportunities);

        return foundFilesOpportunities;
    }

    @ApiOperation(value = "Updates the FilesOpportunities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FilesOpportunities editFilesOpportunities(@PathVariable("id") Integer id, @RequestBody FilesOpportunities filesOpportunities) {
        LOGGER.debug("Editing FilesOpportunities with id: {}" , filesOpportunities.getId());

        filesOpportunities.setId(id);
        filesOpportunities = filesOpportunitiesService.update(filesOpportunities);
        LOGGER.debug("FilesOpportunities details with id: {}" , filesOpportunities);

        return filesOpportunities;
    }

    @ApiOperation(value = "Deletes the FilesOpportunities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFilesOpportunities(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting FilesOpportunities with id: {}" , id);

        FilesOpportunities deletedFilesOpportunities = filesOpportunitiesService.delete(id);

        return deletedFilesOpportunities != null;
    }

    /**
     * @deprecated Use {@link #findFilesOpportunities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FilesOpportunities instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilesOpportunities> searchFilesOpportunitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FilesOpportunities list by query filter:{}", (Object) queryFilters);
        return filesOpportunitiesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FilesOpportunities instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilesOpportunities> findFilesOpportunities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FilesOpportunities list by filter:", query);
        return filesOpportunitiesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FilesOpportunities instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilesOpportunities> filterFilesOpportunities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FilesOpportunities list by filter", query);
        return filesOpportunitiesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFilesOpportunities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return filesOpportunitiesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportFilesOpportunitiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = FilesOpportunities.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> filesOpportunitiesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of FilesOpportunities instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFilesOpportunities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FilesOpportunities");
		return filesOpportunitiesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFilesOpportunitiesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return filesOpportunitiesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FilesOpportunitiesService instance
	 */
	protected void setFilesOpportunitiesService(FilesOpportunitiesService service) {
		this.filesOpportunitiesService = service;
	}

}