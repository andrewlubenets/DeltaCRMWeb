/*Copyright (c) 2018-2019 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.crmweb.crm;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Departments generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`departments`")
public class Departments implements Serializable {

    private Integer id;
    private String code;
    private String name;
    private String description;
    private Integer parent;
    private Integer entityid;
    private Integer head;
    private Integer locationid;
    private String status;
    private Locations locations;
    private Entities entities;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`code`", nullable = true, length = 255)
    public String getCode() {
        return this.code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    @Column(name = "`name`", nullable = true, length = 255)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "`description`", nullable = true, length = 255)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "`parent`", nullable = true, scale = 0, precision = 10)
    public Integer getParent() {
        return this.parent;
    }

    public void setParent(Integer parent) {
        this.parent = parent;
    }

    @Column(name = "`entityid`", nullable = true, scale = 0, precision = 10)
    public Integer getEntityid() {
        return this.entityid;
    }

    public void setEntityid(Integer entityid) {
        this.entityid = entityid;
    }

    @Column(name = "`head`", nullable = true, scale = 0, precision = 10)
    public Integer getHead() {
        return this.head;
    }

    public void setHead(Integer head) {
        this.head = head;
    }

    @Column(name = "`locationid`", nullable = true, scale = 0, precision = 10)
    public Integer getLocationid() {
        return this.locationid;
    }

    public void setLocationid(Integer locationid) {
        this.locationid = locationid;
    }

    @Column(name = "`status`", nullable = true, length = 255)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`locationid`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`departments_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Locations getLocations() {
        return this.locations;
    }

    public void setLocations(Locations locations) {
        if(locations != null) {
            this.locationid = locations.getId();
        }

        this.locations = locations;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`entityid`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`departments_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Entities getEntities() {
        return this.entities;
    }

    public void setEntities(Entities entities) {
        if(entities != null) {
            this.entityid = entities.getId();
        }

        this.entities = entities;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Departments)) return false;
        final Departments departments = (Departments) o;
        return Objects.equals(getId(), departments.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}